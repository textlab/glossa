App.Router = Em.Router.extend
  enableLogging: <%= Rails.env == 'development' %>

  root: Em.Route.create

    # The *index* state has the route '/', meaning that it will always be
    # entered whenever the application is loaded by entering some URL in the
    # browser (regardless of which substate that URL eventually routes to).
    index: Em.Route.create
      route: '/'

      enter: (router) ->
        corpusId = 1  # TESTING!!!

        # Loading the corpus also includes metadata categories and values
        corpus = App.Corpus.find(corpusId)
        router.get('selectedCorpusController').initCorpus(corpus)

      #########################
      # Child routes for index
      #########################

      home: Em.Route.create
        route: '/home'

        enter: (router) ->
          # Choose which search interface to display based on the search type
          # for this corpus
          searchType = router.get('selectedCorpusController').get('searchType')
          @newRoute = switch searchType
            when 'cwb' then 'index.search.cwb.regex'

            # Add routes for other search interfaces/engines here as they are
            # implemented, e.g.
            # when 'corpuscle' then 'index.search.corpuscle.simple'
            # when 'annis2' then 'index.search.annis2.simple'

        connectOutlets: (router) ->
          # Using transitionTo in the *enter* method doesn't work, so we have
          # to do it here, although it has nothing to do with connecting
          # outlets...
          router.transitionTo(@newRoute)


      search: Em.Route.create
        route: '/search'

        connectOutlets: (router) ->
          appController = router.get('applicationController')

          appController.connectOutlet('leftSidebar', 'metadataAccordion')

        ##########################################
        # Child routes for index.search
        ##########################################

        cwb: Em.Route.create
          route: '/cwb'

          ##############################################
          # Child routes for index.search.cwb
          ##############################################

          simple: Em.Route.create()

          regex: Em.Route.create
            route: '/regex'

            enter: (router) ->
              # Now that we know we will use the regex interface, connect its
              # controller to the controller handling searches
              router.set('cwbSearchesController.currentSearchController',
                router.get('cwbRegexSearchController'))

            connectOutlets: (router) ->
              appController = router.get('applicationController')

              appController.connectOutlet
                outletName: 'corpusInfo'
                viewClass: App.CorpusInfoView
                controller: router.get('selectedCorpusController')

              appController.connectOutlet('search', 'cwbRegexSearch')
              appController.disconnectOutlet('results')

            exit: (router) ->
              appController = router.get('applicationController')
              appController.disconnectOutlet('corpusInfo')

            ####################################
            # Events for index.search.cwb.regex
            ####################################

            search: (router) ->
              router.get('cwbSearchesController').createCwbSearch()
              App.store.commit()


          results: Em.Route.create
            route: '/results/:cwb_search_id/:page'

            connectOutlets: (router, params) ->
              appController = router.get('applicationController')

              search = App.CwbSearch.find(params['cwb_search_id'])
              results = []
              appController.connectOutlet('results', 'cwbResults', results)
