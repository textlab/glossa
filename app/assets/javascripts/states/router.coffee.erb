App.Router = Em.Router.extend
  enableLogging: <%= Rails.env == 'development' %>

  root: Em.Route.create
    index: Em.Route.create
      route: '/'

      enter: (router) ->
        corpusId = 1  # TESTING!!!

        # Loading the corpus also includes metadata categories and values
        corpus = App.Corpus.find(corpusId)
        router.get('selectedCorpusController').initCorpus(corpus)

      #########################
      # Child routes for index
      #########################

      start: Em.Route.create
        route: '/start'

        enter: (router) ->
          # Choose which search interface to display based on the search type
          # for this corpus
          searchType = router.get('selectedCorpusController').get('searchType')
          @newRoute = switch searchType
            when 'cwb', 'corpuscle' then 'index.showingSearchInterface.word.regex'

        connectOutlets: (router) ->
          # Using transitionTo in the *enter* method doesn't work, so we have
          # to do it here, although it has nothing to do with connecting
          # outlets...
          router.transitionTo(@newRoute)


      showingSearchInterface: Em.Route.create
        route: '/search'

        connectOutlets: (router) ->
          appController = router.get('applicationController')

          appController.connectOutlet('leftSidebar', 'metadataAccordion')
          appController.connectOutlet
            outletName: 'corpusInfo'
            viewClass: App.CorpusInfoView
            controller: router.get('selectedCorpusController')

        ####################################
        # Events for showingSearchInterface
        ####################################

        search: (router) ->
          query = router.get('regexSearchController').createQuery()
          search = App.Search.createRecord(query: query)

          router.get('searchesController').pushObject(search)
          App.store.commit()

        ##########################################
        # Child routes for showingSearchInterface
        ##########################################

        word: Em.Route.create
          route: '/word'

          ###############################################
          # Child routes for showingSearchInterface.word
          ###############################################

          simple: Em.Route.create()

          regex: Em.Route.create
            route: '/regex'

            connectOutlets: (router) ->
              appController = router.get('applicationController')
              appController.connectOutlet('search', 'regexSearch')
