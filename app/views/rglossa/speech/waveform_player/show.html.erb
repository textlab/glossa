<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SoundManager 2 Demo: Play MP3 links on a page, "page as playlist" style</title>
<meta name="robots" content="noindex" />

<!-- Page player core CSS -->
<%= stylesheet_link_tag ActionController::Base.helpers.asset_path("rglossa/speech/wfplayer.css") %>

<!-- soundManager.useFlashBlock: related CSS -->
<%= stylesheet_link_tag ActionController::Base.helpers.asset_path("rglossa/speech/wfplayer-flashblock.css") %>

<style type="text/css">
ul.playlist li .comment {font-size:0.65em;opacity:0.5}
</style>

<!-- soundManager API -->
<%= javascript_include_tag ActionController::Base.helpers.asset_path("rglossa/speech/soundmanager2-nodebug-jsmin.js") %>

<script>
  var total_width = <%= @total_imgwidth %>;

/* --------

  Config override: This demo uses shiny flash 9 stuff, overwriting Flash 8-based defaults
  Alternate PP_CONFIG object must be defined before soundManager.onready()/onload() fire.
  Alternately, edit the config in page-player.js to simply use the values below by default

-------- */
soundManager.setup({
  flashVersion: 9,
  preferFlash: !window.location.toString().match(/experimental/i), // for visualization effects
  debugMode: false,
  debugFlash: false,
  useHighPerformance: true, // keep flash on screen, boost performance
  wmode: 'transparent', // transparent SWF, if possible
  url: '<%= File.join ENV["RAILS_RELATIVE_URL_ROOT"] || "", ActionController::Base.helpers.asset_path("rglossa/speech/") %>'
});

// custom page player configuration

var PP_CONFIG = {
  autoStart: true,      // begin playing first sound when page loads
  playNext: false,        // stop after one sound, or play through list until end
  allowRightClick: true,
  useThrottling: true,  // try to rate-limit potentially-expensive calls (eg. dragging position around)</span>
  usePeakData: true,     // [Flash 9 only] whether or not to show peak data (left/right channel values) - nor noticable on CPU
  useWaveformData: false,// [Flash 9 only] show raw waveform data - WARNING: LIKELY VERY CPU-HEAVY
  useEQData: false,      // [Flash 9 only] show EQ (frequency spectrum) data
  useFavIcon: false     // try to apply peakData to address bar (Firefox + Opera) - performance note: appears to make Firefox 3 do some temporary, heavy disk access/swapping/garbage collection at first(?) - may be too heavy on CPU
}

</script>

<!-- Page player main script -->
<%= javascript_include_tag ActionController::Base.helpers.asset_path("rglossa/speech/wfplayer.js") %>
<%= javascript_include_tag ActionController::Base.helpers.asset_path("jquery.min") %>
<script src="<%= '%s/%s.js' % [@conf['output_dir'], @file] %>" type="text/javascript"></script>
</head>

<body>
<form>
Show: <label><input type="checkbox" id="wfcb" checked>waveform &amp; spectrogram</label> |
<label><input type="checkbox" id="fmcb" checked>formants:
  <span style="color: red">1</span> <span style="color: lightgreen">2</span>
  <span style="color: blue">3</span> <span style="color: orange">4</span></label> |
<label><input type="checkbox" id="ptcb" checked>pitch</label> |
<a href="#" id="zoom-in" ><img src="<%= File.join ENV['RAILS_RELATIVE_URL_ROOT'] || '', ActionController::Base.helpers.asset_path('rglossa/speech/zoom-in.png') %>" title="Zoom in"></a> |
<a href="#" id="zoom-out"><img src="<%= File.join ENV['RAILS_RELATIVE_URL_ROOT'] || '', ActionController::Base.helpers.asset_path('rglossa/speech/zoom-out.png') %>" title="Zoom out to whole utterance"></a> |
<a href="#" id="extend-left" style="text-decoration: none" title="Extend the audio to the left by 1 second">[&lt; 1s</a> |
<a href="#" id="extend-right" style="text-decoration: none" title="Extend the audio to the right by 1 second">1s &gt;]</a> |
Show selection stats:
<label><input type="checkbox" id="show-min" checked>min</label>
<label><input type="checkbox" id="show-avg" checked>avg</label>
<label><input type="checkbox" id="show-max" checked>max</label>
<script language="JavaScript">
$('#extend-left').click(function() {
  window.location.href='wfplayer-<%= params[:corpus_id] %>-<%= params[:line_key] %>-<%= "%1.2f" % (params[:start].to_f-1) %>-<%= params[:stop] %>-<%= params[:oldstart] %>-<%= params[:oldstop] %>';
});

$('#extend-right').click(function() {
  window.location.href='wfplayer-<%= params[:corpus_id] %>-<%= params[:line_key] %>-<%= params[:start] %>-<%= "%1.2f" % (params[:stop].to_f+1) %>-<%= params[:oldstart] %>-<%= params[:oldstop] %>';
});

$('#zoom-out').click(function() {
  window.location.href='wfplayer-<%= params[:corpus_id] %>-<%= params[:line_key] %>-<%= params[:oldstart] %>-<%= params[:oldstop] %>';
});

$('#zoom-in').click(function() {
  if (pagePlayer.lastSound.startPos && pagePlayer.lastSound.stopPos && pagePlayer.lastSound.stopPos-pagePlayer.lastSound.startPos > 150) {
    window.location.href = 'wfplayer-<%= params[:corpus_id] %>-<%= params[:line_key] %>-' +
                           (pagePlayer.lastSound.startPos/1000+<%= params[:start] %>).toFixed(2) +
                           '-' + (pagePlayer.lastSound.stopPos/1000+<%= params[:start] %>).toFixed(2) +
                           '-' + <%= params[:oldstart] %> + '-' + <%= params[:oldstop] %> + '-' + $('ul.playlist').width();
  } else alert('Make a selection longer than 150ms to zoom in');
  return false;
});
$('#show-min').click(function() { update_sel_data(); });
$('#show-avg').click(function() { update_sel_data(); });
$('#show-max').click(function() { update_sel_data(); });
</script>
</form>
 <div id="debug"></div>
 <div id="bar"></div>
 <ul style="width: 90%" class="playlist" data-value="<%= @conf['output_dir'] %>">
  <li><span data-value="<%= @file %>"><div class="btn"><img src="<%= File.join ENV['RAILS_RELATIVE_URL_ROOT'] || '', ActionController::Base.helpers.asset_path('rglossa/speech/play-pause.png') %>"></div>&nbsp;<div class="btn">Play / Pause</div></span></li>
 </ul>
 <%
   @basenames.zip(@imgwidths, (0..Float::INFINITY)).each do |basename, imgwidth, i|
     width = 100 * imgwidth / @total_imgwidth
   %><img id='small<%= i %>' src='<%= @conf['output_dir'] %>/<%= basename %>-wave.jpg' width='<%= width %>%' height='70' style='display:none'><%
   end
 %>
 <div style="background-color: #888; color: #fff; font-size: 80%; font-family: monaco,'VT-100','lucida console',courier,system; width: 90%" id="mouse-avg"></div>
 <iframe id='iframe' height="237" width="90%" style="border: 0; float: left"></iframe>
 <div id="scale" style="width: 10%; height: 237px; float: left">
   <div id="spec" class="wave" style="float: left; position: relative">Spect.&nbsp;<br>(Hz)</div>
   <div id="fmt" class="fmt" style="float: left; position: relative">Formants&nbsp;<br>(Hz)</div>
   <div id="pitch" class="pitch" style="float: left; position: relative">Pitch&nbsp;<br>(Hz)</div>
 </div><div style="clear: both"></div>
<script type="text/javascript">
  var scale_font_size = 10;
  function hz2top(hz, max) {
    return total_height - hz*spec_height/max - scale_font_size/2
  }
  $('#scale').css('font-size', '' + scale_font_size + 'px');
  for (i of [10000, 7500, 5000, 2500, 0])
    $('#spec').append('<div style="position: absolute; left: 5px; top: ' + hz2top(i, spec_top_freq) + 'px">' + i + '</div>');
  for (i of [4000, 3000, 2000, 1000, 0])
    $('#fmt').append('<div style="position: absolute; left: 5px; top: ' + hz2top(i, max_fmt) + 'px">' + i + '</div>');
  for (i of [500, 400, 300, 200, 100, 0])
    $('#pitch').append('<div style="position: absolute; left: 5px; top: ' + hz2top(i, max_pitch) + 'px">' + i + '</div>');
</script>
<script type="text/javascript">
var scrollMode = false;
var doc = document.getElementById('iframe').contentWindow.document;
doc.open();
doc.write('<html><head><title></title></head><body title="Right-click to export the numerical values at the mouse position to a separate window" style="margin: 0 0 0 0; overflow-y: hidden; width: <%= @total_imgwidth %>px">');
doc.write('<div id="bar" style="width: 2px; background-color: red; height: <%= @conf['total_height'] %>px; position: absolute; z-index: 3"></div>');
doc.write('<div id="sel-start" style="position: relative; z-index: 4; cursor: ew-resize"></div>');
doc.write('<div id="sel-stop" style="position: relative; z-index: 4; cursor: ew-resize"></div>');
doc.write('<div id="sel" style="position: relative; z-index: 3"></div>');
<% @basenames.zip(0..Float::INFINITY).each do |basename, i| %>
doc.write('<div style="position: relative; z-index: 0; float: left" id="waveform<%= i %>">');
doc.write('<img src="<%= @conf['output_dir'] %>/<%= basename %>-wave.jpg" class="wave">');
doc.write('<img src="<%= @conf['output_dir'] %>/<%= basename %>-fmt.png" style="position: absolute; z-index: 2; left: 0; top: 0" class="fmt">');
doc.write('<img src="<%= @conf['output_dir'] %>/<%= basename %>-pitch.png" style="position: absolute; z-index: 1; left: 0; top: 0" class="pitch"></div>');
<% end %>
doc.write('</body></html>');
doc.close();

getPos = function(oSound, event) {
  return Math.floor(oSound.duration*event.pageX/<%= @total_imgwidth %>)
};

selEdgeCss = {'width': '2px', 'height': '<%= @conf['total_height'] %>px', 'backgroundColor': 'blue',
              'position': 'absolute'};

doc.body.onmousedown = function(event) {
  if (event.button != 0) return false;
  scrollMode = true;
  $('#iframe').contents().find('#sel').css('visibility', 'hidden');
  oSound = pagePlayer.lastSound;
  oSound.startX = event.pageX;
  oSound.startPos = getPos(oSound, event);
  oSound.setPosition(oSound.startPos);
  oSound.stop();
  var selStartCss = $.extend({}, selEdgeCss, {'left': event.pageX});
  $('#iframe').contents().find('#sel-start').css(selStartCss);
  return false;
};

doc.body.onmousemove = function(event) {
  if (scrollMode) {
    var selStopCss = $.extend({}, selEdgeCss, {'left': event.pageX});
    var selCss = {'width': Math.abs(event.pageX-oSound.startX)+'px',
                  'height': '<%= @conf['total_height'] %>px',
                  'backgroundColor': 'rgba(0, 0, 0, 0.1)',
                  'left': Math.min(event.pageX, oSound.startX), 'position': 'absolute',
                  'visibility': 'visible'}
    $('#iframe').contents().find('#sel-stop').css(selStopCss);
    $('#iframe').contents().find('#sel').css(selCss);
  }
  pos_data = '';
  if (pitch[event.pageX] && $('#ptcb').prop('checked')) {
    pos_data += 'Pitch (Hz): <span style="width: auto; color: black">' + pitch[event.pageX] + '</span> ';
  }
  if (formants[event.pageX] && $('#fmcb').prop('checked')) {
    pos_data += 'Formants (Hz): '
    pos_data += '<span style="width: auto; color: #ff8080">' + formants[event.pageX][0] + '</span>&nbsp;';
    pos_data += '<span style="width: auto; color: lightgreen">' + formants[event.pageX][1] + '</span>&nbsp;';
    pos_data += '<span style="width: auto; color: blue">' + formants[event.pageX][2] + '</span>&nbsp;';
    pos_data += '<span style="width: auto; color: orange">' + formants[event.pageX][3] + '</span>&nbsp;';
  }
  pos_data += 'Mouse pos.: <span style="width: auto; color: black">' + getPos(pagePlayer.lastSound, event) + ' ms';
  if ($('#wfcb').prop('checked')) {
    pos_data += ', ' + Math.round((total_height-event.pageY)*spec_top_freq/spec_height) + ' Hz';
  }
  pos_data += '</span>';
  $('#mouse-pos').html(pos_data);
  $('#mouse-pos').css('background-color', '');
}

doc.body.onmouseout = function(event) {
  $('#mouse-pos').html('');
  $('#mouse-pos').css('background-color', '');
}

doc.body.oncontextmenu = function(event) {
  return false;
}

function update_sel_data() {
    startX = parseInt($('#iframe').contents().find('#sel-start').css('left'));
    stopX = parseInt($('#iframe').contents().find('#sel-stop').css('left'));
    if (startX > stopX) {
      var tmp = startX; startX = stopX; stopX = tmp;
    }
    pitch_sel = pitch.filter(function(el, idx) { return idx >= startX && idx <= stopX; });
    avg_data = '<span style="float: right; position: relative"><a href="#" id="export-mouse-avg" style="text-decoration: none; color: white; border: 1px solid white">Export selection stats</a></span>';
    avg_data += 'Selection (ms): <span style="width: auto; color: blue">' + oSound.startPos + '</span>&ndash;<span style="width: auto; color: blue">' + oSound.stopPos + '</span>&nbsp;';
    show_min = $('#show-min').prop('checked');
    show_avg = $('#show-avg').prop('checked');
    show_max = $('#show-max').prop('checked');
    show_fmt = $('#fmcb').prop('checked');
    show_pitch = $('#ptcb').prop('checked');
    var sum = function(a, b) { return a + b; };
    var min = function(a, b) { return Math.min(a, b); };
    var max = function(a, b) { return Math.max(a, b); };
    var avg = function(ary) { return (ary.reduce(sum) / ary.length).toFixed(2); };
    var stats = function(ary) {
      vals = [];
      if (show_min) vals.push(ary.reduce(min));
      if (show_avg) vals.push(avg(ary));
      if (show_max) vals.push(ary.reduce(max));
      return vals.join('<span style="width: auto; color: white">/</span>');
    };
    stats_str = [];
    if (show_min) stats_str.push('min');
    if (show_avg) stats_str.push('avg');
    if (show_max) stats_str.push('max');
    if (show_pitch && pitch_sel.length > 0 && stats_str.length > 0) {
      avg_data += 'Pitch (' + stats_str.join('/') + '): <span style="width: auto; color: black">' + stats(pitch_sel) + '</span>';
    }
    formants_sel = formants.filter(function(el, idx) { return idx >= startX && idx <= stopX; });
    if (show_fmt && formants_sel.length > 0 && stats_str.length > 0) {
      f0_sel = formants_sel.map(function(el) { return el[0] });
      f1_sel = formants_sel.map(function(el) { return el[1] });
      f2_sel = formants_sel.map(function(el) { return el[2] });
      f3_sel = formants_sel.map(function(el) { return el[3] });
      avg_data += ' Formants (' + stats_str.join('/') + '): ';
      avg_data += '<span style="width: auto; color: #ff8080">' + stats(f0_sel) + '</span> ';
      avg_data += '<span style="width: auto; color: lightgreen">' + stats(f1_sel) + '</span> ';
      avg_data += '<span style="width: auto; color: blue">' + stats(f2_sel) + '</span> ';
      avg_data += '<span style="width: auto; color: orange">' + stats(f3_sel) + '</span> ';
    }
    $('#mouse-avg', document).html(avg_data);
    $('#export-mouse-avg').click(function(){
      exportedValues = window.open('', 'exportedValues');
      exportedValues.document.write($('#mouse-avg').html() + '<br>');
      $('#export-mouse-avg').css('background-color', '#404040');
    });
}

doc.body.onmouseup = function(event) {
  if (event.button != 0) {
    exportedValues = window.open('', 'exportedValues');
    exportedValues.document.write($('#mouse-pos').html() + '<br>');
    $('#mouse-pos').css('background-color', '#404040');
    return false;
  }
  if (!scrollMode) return true;
  scrollMode = false;
  oSound = pagePlayer.lastSound;
  curPos = getPos(oSound, event);
  if (Math.abs(curPos - oSound.startPos) < 10) {
    oSound.startPos = Math.min(curPos, oSound.startPos);
    oSound.stopPos = Math.floor(oSound.duration);
    $('#mouse-avg', document).html('');
  } else {
    if (curPos < oSound.startPos) {
      oSound.stopPos = oSound.startPos;
      oSound.startPos = curPos;
    } else {
      oSound.stopPos = curPos;
    }

    update_sel_data();
  }
  var selStopCss = $.extend({}, selEdgeCss, {'left': event.pageX});
  $('#iframe').contents().find('#sel-stop').css(selStopCss);
  oSound.stop();
  oSound.setPosition(oSound.startPos);
  oSound.play();
};

toggleWaveform = function(id, cls) {
  if($(id).is(':checked')) {
    $('#iframe').contents().find(cls).css('visibility', 'visible');
    $(cls).css('display', 'block');
  } else {
    $('#iframe').contents().find(cls).css('visibility', 'hidden');
    $(cls).css('display', 'none');
  }
}

$(document).ready(function() {
  $('#wfcb').click(function() {
    toggleWaveform('#wfcb', '.wave');
    update_sel_data();
  });
  $('#fmcb').click(function() {
    toggleWaveform('#fmcb', '.fmt');
    update_sel_data();
  });
  $('#ptcb').click(function() {
    toggleWaveform('#ptcb', '.pitch');
    update_sel_data();
  });
  var iframeBodyWidth = $("#iframe").contents().find("body").width();
  if ($("#iframe").width() > iframeBodyWidth)
    $("#iframe").css('width', '' + iframeBodyWidth + 'px');
});
</script>
Problems? Switch to
<script>

// enable experimental features, if #experimental is in the URL
if (window.location.toString().match(/experimental/i)) {
  document.write('<a href="#" onclick="window.location.href = this; window.location.reload()">Flash player</a>');
} else {
  document.write('<a href="#experimental" onclick="window.location.href = this; window.location.reload()">JavaScript player</a>');
}

var is_shiny = false;
function setTheme(sTheme) {
  var o = pagePlayer.getByClassName('playlist','ul');
  for (var i=o.length; i--;) {
    o[i].className = 'playlist'+(pagePlayer.cssBase?' '+pagePlayer.cssBase:'')+(sTheme?' '+sTheme:'')+(is_shiny?' shiny':'');
  }
  return false;
}

function setShiny(bShiny, e) {
  is_shiny = bShiny;
  var o = pagePlayer.getByClassName('playlist','ul');
  var sClass = 'shiny';
  for (var i=o.length; i--;) {
    if (!bShiny) {
      pagePlayer.removeClass(o[i],sClass);
    } else {
      pagePlayer.addClass(o[i],sClass);
    }
  }
}
</script>
</body>
</html>
