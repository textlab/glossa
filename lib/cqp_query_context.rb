# This class contains all settings relevant to a CQP query and is
# necessary when constructing a SimpleCQP instance.

# Query spec
#
# A spec is hash that contains corpora symbols as keys and corpora
# sub specs as values. A sub spec is an array of query word
# specifications that generates a CQP query in the same sequence. Each
# specification is a hash that contains the keys :string, :attributes,
# :min, and :max, where the last three may be nil.
# 'string' => The word string (word form or lemma)
# 'attributes' => A hash with the attribute name as a string for the key
#   and the attribute value as the hash value in string form.
# 'min' => Low end of the preceding interval as an integer
# 'max' => High end of the preceding interval as an integer
#
# Examples:
#
# { 'english' => [{'min' => nil, 'max' => nil, 'string' => "lord",
#                   'attributes' => { 'pos' => "NNP" }},
#                 {'min' => 0, 'max' => 3, 'string' => "worlds"}]}
#
# Generates the following CQP query (with :case_insensitive
# and :corpus => "ENGLISH" set):
# [(word='lord'%c) & (pos='NNP')] []{0, 3} [(word='worlds'%c)]
#
# The following spec
# { 'english' => [{ 'min' => nil, 'max' => nil, 'string' => 'the' }],
#   'arabic_u' => [{ 'min' => nil, 'max' => nil, 'string' => 'fy' }],
#   'arabic_v' => [{ 'min' => nil, 'max' => nil, 'string' => 'fiy' }]}
#
# Generates the following CQP query (with :corpus => "ENGLISH" set):
# "[(word='the')] :ARABIC_U [(word='fy')] :ARABIC_V [(word='fiy')]",

class CQPQueryContext
  attr_accessor :corpus, :context, :context_type, :alignment, :cutoff,
    :attributes, :structures, :registry, :id, :query_spec, :case_insensitive

  def initialize(opts={})
    # id indentifying query dumps, should only be populated with id's
    # generated by SimpleCQP (see SimpleCQP initializer).
    @id = opts[:id] || nil
    # see comments above
    @query_spec = opts[:query_spec] || nil
    # corpus identifier as a string as used by CQP
    @corpus = opts[:corpus] || nil

    @context = opts[:context] || [7, 7]
    @context_type = opts[:context_type] || :words

    # an array of corpus identifiers
    @alignment = opts[:alignment] || []

    @attributes = opts[:attributes] || :word
    @structures = opts[:structures] || nil

    # registry path as a string
    # must be set for all CQP operations
    @registry = opts[:registry] ||
      (CQPQueryContext.const_defined?('DEFAULT_REGISTRY') && DEFAULT_REGISTRY)
    Rails.logger.warn('WARNING: No registry specified!') unless @registry

    @case_insensitive = opts[:case_insensitive] || nil

    # if no alignments are specified and the context is for a query we set the
    # alignments automatically to the additional corpora set in the query
    if @alignment.count == 0 and @query_spec
      @alignment = alignment_from_query
    end
  end

  def left_context
    return @context[0]
  end

  def right_context
    return @context[1]
  end

  def context_type
    return @context_type.to_s
  end

  # extract additional aligned corpora from the query
  def alignment_from_query
    alignments = @query_spec.map { |query| query['corpus'].downcase }
    alignments.delete(@corpus.downcase)

    return alignments
  end
end
